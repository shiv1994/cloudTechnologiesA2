/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Generates n-grams of the given size(s). This token filter is implemented
 * using Apache Lucene.
 *
 * @extends models['TokenFilter']
 */
class NGramTokenFilterV2 extends models['TokenFilter'] {
  /**
   * Create a NGramTokenFilterV2.
   * @member {number} [minGram] The minimum n-gram length. Default is 1.
   * Maximum is 300. Must be less than the value of maxGram. Default value: 1 .
   * @member {number} [maxGram] The maximum n-gram length. Default is 2.
   * Maximum is 300. Default value: 2 .
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of NGramTokenFilterV2
   *
   * @returns {object} metadata of NGramTokenFilterV2
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Azure.Search.NGramTokenFilterV2',
      type: {
        name: 'Composite',
        className: 'NGramTokenFilterV2',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            type: {
              name: 'String'
            }
          },
          minGram: {
            required: false,
            serializedName: 'minGram',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 300
            },
            type: {
              name: 'Number'
            }
          },
          maxGram: {
            required: false,
            serializedName: 'maxGram',
            defaultValue: 2,
            constraints: {
              InclusiveMaximum: 300
            },
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NGramTokenFilterV2;
